{"version":3,"sources":["history.js","component/Callback.js","Constants.js","component/AuthView.js","component/AuthContainer.js","App.js","serviceWorker.js","index.js"],"names":["history","require","createBrowserHistory","axios","queryString","Callback","props","getAccessToken","clientId","CLIENT_ID","clientSecret","CLIENT_SECRET","url","SPOTIFY_TOKEN_URL","requestBody","redirect_uri","REDIRECT_URL","code","state","grant_type","GRANT_TYPE","config","headers","Buffer","toString","post","stringify","then","result","accessToken","data","access_token","localStorage","setItem","window","location","href","DEEP_LINK_URL","catch","err","push","parsed","parse","this","search","setState","Component","withRouter","injectIntl","SPOTIFY_LOGIN_URL_1","SPOTIFY_LOGIN_URL_2","AuthView","onClick","className","id","type","value","AuthContainer","generateRandomString","length","text","possible","i","charAt","Math","floor","random","getItem","App","data-test","exact","path","component","Boolean","hostname","match","ReactDOM","render","locale","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+FAAA,IAAMA,EAAUC,EAAQ,GAAWC,uBACpBF,O,6HCITG,EAAQF,EAAQ,IAChBG,EAAcH,EAAQ,IAEtBI,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAcVC,eAAiB,WACb,IAAMC,EAAWC,IACXC,EAAeC,IACfC,EAAMC,IACNC,EAAc,CAChBC,aAAcC,IACdC,KAAM,EAAKC,MAAMD,KACjBE,WAAYC,KAGVC,EAAS,CACXC,QAAS,CACL,eAAgB,oCAChB,cAAiB,SAAY,IAAIC,EAAOf,EAAW,IAAME,GAAcc,SAAS,YAIxFrB,EAAMsB,KAAKb,EAAKR,EAAYsB,UAAUZ,GAAcO,GACnDM,MAAK,SAACC,GACH,IAAIC,EAAcD,EAAOE,KAAKC,aAC9BC,aAAaC,QAAQ,QAASJ,GAC9BK,OAAOC,SAASC,KAAOC,IAAgBR,KAE1CS,OAAM,SAACC,GACJvC,IAAQwC,KAAK,SApCjB,EAAKtB,MAAQ,CACTD,KAAM,KACNC,MAAO,MALI,E,iFASG,IAAD,OACbuB,EAASrC,EAAYsC,MAAMC,KAAKrC,MAAM6B,SAASS,QACnDD,KAAKE,SAAS,CAAC5B,KAAMwB,EAAOxB,KAAMC,MAAOuB,EAAOvB,QAAQ,kBAAM,EAAKX,sB,+BAiCnE,OAAO,S,GA7CQuC,aAiDRC,gBAAYC,YAAW3C,M,4FCzDtC,gRAAO,IAAMgC,EAAgB,sBAChB5B,EAAY,mCACZE,EAAgB,mCAChBE,EAAoB,yCACpBG,EAAe,iCACfI,EAAa,qBACb6B,EAAsB,gSACtBC,EAAsB,mB,+JCSpBC,EAbE,SAAA7C,GAAU,IACf8C,EAAY9C,EAAZ8C,QACR,OACQ,yBAAKC,UAAU,cACX,yBAAKC,GAAG,SACJ,wBAAID,UAAU,YAAd,+BACA,2BAAOE,KAAK,SAASF,UAAU,6BAA6BG,MAAM,qBAAqBJ,QAASA,O,OCF9GK,E,2MAUFC,qBAAuB,SAAAC,GAInB,IAHA,IAAIC,EAAO,GACPC,EAAW,iEAENC,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAEhE,OAAOC,G,EAGXR,QAAU,WACN,IAAIlC,EAAQ,EAAKwC,qBAAqB,IAClC9C,EAAMqC,IAAsB/B,EAAQgC,IAAsBzC,IAC9DyB,OAAOC,SAASC,KAAOxB,G,mFApBvB,IAAIoB,EAAeE,OAAOF,aAC1B,GAAIA,GAAgBA,EAAamC,QAAQ,QAAS,CAC9C,IAAItC,EAAcG,EAAamC,QAAQ,QACvCjC,OAAOC,SAASC,KAAOC,IAAgBR,K,+BAqB3C,OACI,kBAAC,EAAD,CACIuB,QAAST,KAAKS,c,GA7BFN,aAkCbC,cAAYC,YAAWS,I,gBCxBvBW,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,YAAU,MAAMrE,QAASA,KAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsE,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,YAAYC,UAAWnE,SCCjCoE,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,IAAD,CAAcC,OAAQ,MAAtB,IAA8B,kBAAC,EAAD,MAA9B,KAAuDC,SAASC,eAAe,SD4HzF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAAAyD,GACjCA,EAAaC,kB","file":"static/js/main.955b54eb.chunk.js","sourcesContent":["const history = require(\"history\").createBrowserHistory();\nexport default history;\n","import {Component} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { injectIntl } from \"react-intl\";\nimport history from \"../history\";\nimport { DEEP_LINK_URL, CLIENT_ID, CLIENT_SECRET, SPOTIFY_TOKEN_URL, REDIRECT_URL, GRANT_TYPE } from '../Constants';\nconst axios = require('axios');\nconst queryString = require('query-string');\n\nclass Callback extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            code: null,\n            state: null\n        }\n    }\n\n    componentDidMount () {\n        var parsed = queryString.parse(this.props.location.search);\n        this.setState({code: parsed.code, state: parsed.state}, () => this.getAccessToken());\n    }\n\n\n    getAccessToken = () => {\n        const clientId = CLIENT_ID;\n        const clientSecret = CLIENT_SECRET;\n        const url = SPOTIFY_TOKEN_URL;\n        const requestBody = {\n            redirect_uri: REDIRECT_URL,\n            code: this.state.code,\n            grant_type: GRANT_TYPE\n        }\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + (new Buffer(clientId + ':' + clientSecret).toString('base64'))\n            }\n        }\n\n        axios.post(url, queryString.stringify(requestBody), config)\n        .then((result) => {\n            let accessToken = result.data.access_token;\n            localStorage.setItem('token', accessToken);\n            window.location.href = DEEP_LINK_URL + accessToken;    \n        })\n        .catch((err) => {\n            history.push('/')\n        })\n    }\n\n    render () {\n        return null;\n    }\n}\n\nexport default withRouter((injectIntl(Callback)));\n","export const DEEP_LINK_URL = 'cplay://auth?token=';\nexport const CLIENT_ID = '2de5eb630c1c47a685658609859ee19e';\nexport const CLIENT_SECRET = 'd09974ecee214be3878c8124dd79277e';\nexport const SPOTIFY_TOKEN_URL = 'https://accounts.spotify.com/api/token';\nexport const REDIRECT_URL = 'http://localhost:3000/callback';\nexport const GRANT_TYPE = 'authorization_code';\nexport const SPOTIFY_LOGIN_URL_1 = 'https://accounts.spotify.com/tr/login?continue=https:%2F%2Faccounts.spotify.com%2Fauthorize%3Fscope%3Duser-read-private%2Buser-read-email%2Buser-top-read%2Buser-read-currently-playing%26response_type%3Dcode%26redirect_uri%3Dhttp%253A%252F%252Flocalhost%253A3000%252Fcallback%26state%3D';\nexport const SPOTIFY_LOGIN_URL_2 = '%26client_id%3D';","import React from 'react';\n\n\nconst AuthView = props => {\n    const { onClick } = props\n    return (\n            <div className=\"lyric-body\">\n                <div id=\"login\">\n                    <h1 className=\"t-center\">Authentication Required !!!</h1>\n                    <input type=\"submit\" className=\"btn btn-primary custom-btn\" value=\"Login with Spotify\" onClick={onClick} />\n                </div>\n            </div>\n    )\n    \n}\n\nexport default AuthView;","import React, {Component} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { injectIntl } from \"react-intl\";\nimport AuthView from './AuthView';\nimport { DEEP_LINK_URL, CLIENT_ID, SPOTIFY_LOGIN_URL_1, SPOTIFY_LOGIN_URL_2 } from '../Constants';\n\n \nclass AuthContainer extends Component {\n    \n    componentDidMount() {\n        let localStorage = window.localStorage;\n        if (localStorage && localStorage.getItem('auth')) {\n            let accessToken = localStorage.getItem('auth');\n            window.location.href = DEEP_LINK_URL + accessToken;\n        }\n    }\n\n    generateRandomString = length => {\n        let text = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        \n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    };\n\n    onClick = () => {\n        let state = this.generateRandomString(16);\n        let url = SPOTIFY_LOGIN_URL_1 + state + SPOTIFY_LOGIN_URL_2 + CLIENT_ID;\n        window.location.href = url;\n    }\n\n    render () {\n        return (\n            <AuthView \n                onClick={this.onClick}\n            />\n        )\n    }\n}\nexport default withRouter((injectIntl(AuthContainer)));","import React from 'react';\nimport AuthContainer from './component/AuthContainer';\nimport Callback from './component/Callback';\nimport history from \"./history\";\nimport { Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router data-test=\"app\" history={history}>\n          <Switch>\n            <Route exact path=\"/\" component={AuthContainer} />\n            <Route exact path=\"/callback\" component={Callback} />\n          </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { IntlProvider } from \"react-intl\";\n\nReactDOM.render(<IntlProvider locale={'en'} > <App /> </IntlProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}