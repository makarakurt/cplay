{"version":3,"sources":["component/Callback.js","component/AuthView.js","component/AuthContainer.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","queryString","Callback","props","getAccessToken","requestBody","redirect_uri","code","state","grant_type","config","headers","Buffer","clientId","toString","post","stringify","then","result","accessToken","data","access_token","localStorage","setItem","window","location","href","catch","err","parsed","parse","this","search","setState","Component","AuthView","onClick","className","id","type","value","AuthContainer","generateRandomString","length","text","possible","i","charAt","Math","floor","random","url","getItem","App","URL","searchParams","get","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0JACMA,EAAQC,EAAQ,IAChBC,EAAcD,EAAQ,IAEtBE,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAcVC,eAAiB,WACb,IAGMC,EAAc,CAChBC,aAAc,iCACdC,KAAM,EAAKC,MAAMD,KACjBE,WAAY,sBAGVC,EAAS,CACXC,QAAS,CACL,eAAgB,oCAChB,cAAiB,SAAY,IAAIC,EAAOC,qEAA+BC,SAAS,YAIxFf,EAAMgB,KAdM,yCAcId,EAAYe,UAAUX,GAAcK,GACnDO,MAAK,SAACC,GACH,IAAIC,EAAcD,EAAOE,KAAKC,aAC9BC,aAAaC,QAAQ,QAASJ,GAC9BK,OAAOC,SAASC,KAAO,sBAAwBP,KAElDQ,OAAM,SAACC,QAnCR,EAAKpB,MAAQ,CACTD,KAAM,KACNC,MAAO,MALI,E,iFASG,IAAD,OACbqB,EAAS5B,EAAY6B,MAAMC,KAAK5B,MAAMsB,SAASO,QACnDD,KAAKE,SAAS,CAAC1B,KAAMsB,EAAOtB,KAAMC,MAAOqB,EAAOrB,QAAQ,kBAAM,EAAKJ,sB,+BA+BnE,OAAO,S,GA3CQ8B,aA+CRhC,Q,yMCnCAiC,EAbE,SAAAhC,GAAU,IACfiC,EAAYjC,EAAZiC,QACR,OACQ,yBAAKC,UAAU,cACX,yBAAKC,GAAG,SACJ,wBAAID,UAAU,YAAd,+BACA,2BAAOE,KAAK,SAASF,UAAU,6BAA6BG,MAAM,qBAAqBJ,QAASA,OC4BrGK,E,2MAxBXC,qBAAuB,SAAAC,GAInB,IAHA,IAAIC,EAAO,GACPC,EAAW,iEAENC,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAEhE,OAAOC,G,EAGXR,QAAU,WACN,IACIe,EAAM,gSADE,EAAKT,qBAAqB,IAC8Q,kDACpTlB,OAAOC,SAASC,KAAOyB,G,mFApBvB,IAAI7B,EAAeE,OAAOF,aAC1B,GAAIA,GAAgBA,EAAa8B,QAAQ,QAAS,CAC9C,IAAIjC,EAAcG,EAAa8B,QAAQ,QACvC5B,OAAOC,SAASC,KAAO,sBAAwBP,K,+BAqBnD,OACI,kBAAC,EAAD,CACIiB,QAASL,KAAKK,c,GA7BFF,a,QCWbmB,MAXf,WAQE,OANW,IAAIC,IAAI9B,OAAOC,SAASC,MAC1B6B,aAAaC,IAAI,QACjB,kBAACtD,EAAA,EAAD,MAEA,kBAAC,EAAD,OCGSuD,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.612fb3b9.chunk.js","sourcesContent":["import {Component} from 'react';\nconst axios = require('axios');\nconst queryString = require('query-string');\n\nclass Callback extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            code: null,\n            state: null\n        }\n    }\n\n    componentDidMount () {\n        var parsed = queryString.parse(this.props.location.search);\n        this.setState({code: parsed.code, state: parsed.state}, () => this.getAccessToken());\n    }\n\n\n    getAccessToken = () => {\n        const clientId = '2de5eb630c1c47a685658609859ee19e';\n        const clientSecret = 'd09974ecee214be3878c8124dd79277e';\n        const url = 'https://accounts.spotify.com/api/token';\n        const requestBody = {\n            redirect_uri: 'http://localhost:3000/callback',\n            code: this.state.code,\n            grant_type: 'authorization_code'\n        }\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + (new Buffer(clientId + ':' + clientSecret).toString('base64'))\n            }\n        }\n\n        axios.post(url, queryString.stringify(requestBody), config)\n        .then((result) => {\n            let accessToken = result.data.access_token;\n            localStorage.setItem('token', accessToken);\n            window.location.href = 'cplay://auth?token=' + accessToken;    \n        })\n        .catch((err) => {})\n    }\n\n    render () {\n        return null;\n    }\n}\n\nexport default Callback;\n","import React from 'react';\n\n\nconst AuthView = props => {\n    const { onClick } = props\n    return (\n            <div className=\"lyric-body\">\n                <div id=\"login\">\n                    <h1 className=\"t-center\">Authentication Required !!!</h1>\n                    <input type=\"submit\" className=\"btn btn-primary custom-btn\" value=\"Login with Spotify\" onClick={onClick} />\n                </div>\n            </div>\n    )\n    \n}\n\nexport default AuthView;","import React, {Component} from 'react';\nimport AuthView from './AuthView';\n \nclass AuthContainer extends Component {\n    \n    componentDidMount() {\n        let localStorage = window.localStorage;\n        if (localStorage && localStorage.getItem('auth')) {\n            let accessToken = localStorage.getItem('auth');\n            window.location.href = 'cplay://auth?token=' + accessToken;\n        }\n    }\n\n    generateRandomString = length => {\n        let text = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        \n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    };\n\n    onClick = () => {\n        let state = this.generateRandomString(16);\n        let url = 'https://accounts.spotify.com/tr/login?continue=https:%2F%2Faccounts.spotify.com%2Fauthorize%3Fscope%3Duser-read-private%2Buser-read-email%2Buser-top-read%2Buser-read-currently-playing%26response_type%3Dcode%26redirect_uri%3Dhttp%253A%252F%252Flocalhost%253A3000%252Fcallback%26state%3D' + state + '%26client_id%3D' + '2de5eb630c1c47a685658609859ee19e';\n        window.location.href = url;\n    }\n\n    render () {\n        return (\n            <AuthView \n                onClick={this.onClick}\n            />\n        )\n    }\n}\nexport default AuthContainer;","import React from 'react';\nimport AuthContainer from './component/AuthContainer';\nimport Callback from './component/Callback';\nfunction App() {\n  let body = null;\n  let href = new URL(window.location.href);\n  if (href.searchParams.get('code')) {\n    body = <Callback />;\n  } else {\n    body = <AuthContainer />;\n  }\n  return body;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}